// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module colorToNdg (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        imgColor_rows_V_dout,
        imgColor_rows_V_empty_n,
        imgColor_rows_V_read,
        imgColor_cols_V_dout,
        imgColor_cols_V_empty_n,
        imgColor_cols_V_read,
        imgColor_data_stream_dout,
        imgColor_data_stream_empty_n,
        imgColor_data_stream_read,
        imgColor_data_stream_5_dout,
        imgColor_data_stream_5_empty_n,
        imgColor_data_stream_5_read,
        imgColor_data_stream_6_dout,
        imgColor_data_stream_6_empty_n,
        imgColor_data_stream_6_read,
        imgNdg_data_stream_V,
        imgNdg_data_stream_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [11:0] imgColor_rows_V_dout;
input   imgColor_rows_V_empty_n;
output   imgColor_rows_V_read;
input  [10:0] imgColor_cols_V_dout;
input   imgColor_cols_V_empty_n;
output   imgColor_cols_V_read;
input  [7:0] imgColor_data_stream_dout;
input   imgColor_data_stream_empty_n;
output   imgColor_data_stream_read;
input  [7:0] imgColor_data_stream_5_dout;
input   imgColor_data_stream_5_empty_n;
output   imgColor_data_stream_5_read;
input  [7:0] imgColor_data_stream_6_dout;
input   imgColor_data_stream_6_empty_n;
output   imgColor_data_stream_6_read;
output  [7:0] imgNdg_data_stream_V;
output   imgNdg_data_stream_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg imgColor_rows_V_read;
reg imgColor_cols_V_read;
reg imgColor_data_stream_read;
reg imgColor_data_stream_5_read;
reg imgColor_data_stream_6_read;
reg imgNdg_data_stream_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    imgColor_rows_V_blk_n;
reg    imgColor_cols_V_blk_n;
reg    imgColor_data_stream_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_156_p2;
reg    imgColor_data_stream_5_blk_n;
reg    imgColor_data_stream_6_blk_n;
wire  signed [31:0] tmp_4_cast_fu_127_p1;
reg  signed [31:0] tmp_4_cast_reg_206;
reg    ap_block_state1;
wire  signed [31:0] tmp_6_cast_fu_141_p1;
reg  signed [31:0] tmp_6_cast_reg_211;
wire   [31:0] lig_fu_150_p2;
reg   [31:0] lig_reg_219;
wire    ap_CS_fsm_state2;
wire   [31:0] col_fu_161_p2;
reg   [31:0] col_reg_227;
reg    ap_block_state3;
reg   [7:0] tmp_reg_232;
wire   [8:0] tmp_1_i_fu_175_p2;
reg   [8:0] tmp_1_i_reg_237;
reg   [31:0] lig_i_reg_95;
reg   [31:0] col_i_reg_106;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond1_fu_145_p2;
wire  signed [11:0] tmp_cast_fu_117_p1;
wire   [11:0] tmp_4_fu_121_p2;
wire  signed [12:0] tmp_5_cast_fu_131_p1;
wire   [12:0] tmp_6_fu_135_p2;
wire   [8:0] tmp_8_cast_i_fu_171_p1;
wire   [8:0] tmp_7_cast_i_fu_167_p1;
wire   [21:0] grp_fu_197_p3;
wire   [8:0] grp_fu_197_p0;
wire   [7:0] grp_fu_197_p1;
wire   [11:0] grp_fu_197_p2;
reg   [3:0] ap_NS_fsm;
wire   [9:0] grp_fu_197_p00;
wire   [9:0] grp_fu_197_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

main_am_addmul_9nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 22 ))
main_am_addmul_9nbkb_U17(
    .din0(grp_fu_197_p0),
    .din1(grp_fu_197_p1),
    .din2(grp_fu_197_p2),
    .dout(grp_fu_197_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_145_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        col_i_reg_106 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        col_i_reg_106 <= col_reg_227;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_6_empty_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_5_empty_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_empty_n == 1'b0))) & (exitcond_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        lig_i_reg_95 <= lig_reg_219;
    end else if ((~((ap_start == 1'b0) | (imgColor_cols_V_empty_n == 1'b0) | (imgColor_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        lig_i_reg_95 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_6_empty_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_5_empty_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state3))) begin
        col_reg_227 <= col_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lig_reg_219 <= lig_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_6_empty_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_5_empty_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_empty_n == 1'b0))) & (exitcond_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_1_i_reg_237 <= tmp_1_i_fu_175_p2;
        tmp_reg_232 <= imgColor_data_stream_6_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (imgColor_cols_V_empty_n == 1'b0) | (imgColor_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_4_cast_reg_206 <= tmp_4_cast_fu_127_p1;
        tmp_6_cast_reg_211 <= tmp_6_cast_fu_141_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_145_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_145_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgColor_cols_V_blk_n = imgColor_cols_V_empty_n;
    end else begin
        imgColor_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (imgColor_cols_V_empty_n == 1'b0) | (imgColor_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgColor_cols_V_read = 1'b1;
    end else begin
        imgColor_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        imgColor_data_stream_5_blk_n = imgColor_data_stream_5_empty_n;
    end else begin
        imgColor_data_stream_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_6_empty_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_5_empty_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_empty_n == 1'b0))) & (exitcond_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        imgColor_data_stream_5_read = 1'b1;
    end else begin
        imgColor_data_stream_5_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        imgColor_data_stream_6_blk_n = imgColor_data_stream_6_empty_n;
    end else begin
        imgColor_data_stream_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_6_empty_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_5_empty_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_empty_n == 1'b0))) & (exitcond_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        imgColor_data_stream_6_read = 1'b1;
    end else begin
        imgColor_data_stream_6_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        imgColor_data_stream_blk_n = imgColor_data_stream_empty_n;
    end else begin
        imgColor_data_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_6_empty_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_5_empty_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_empty_n == 1'b0))) & (exitcond_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        imgColor_data_stream_read = 1'b1;
    end else begin
        imgColor_data_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgColor_rows_V_blk_n = imgColor_rows_V_empty_n;
    end else begin
        imgColor_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (imgColor_cols_V_empty_n == 1'b0) | (imgColor_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgColor_rows_V_read = 1'b1;
    end else begin
        imgColor_rows_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        imgNdg_data_stream_V_ap_vld = 1'b1;
    end else begin
        imgNdg_data_stream_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (imgColor_cols_V_empty_n == 1'b0) | (imgColor_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_145_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~(((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_6_empty_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_5_empty_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_empty_n == 1'b0))) & (exitcond_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~(((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_6_empty_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_5_empty_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_empty_n == 1'b0))) & (exitcond_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (imgColor_cols_V_empty_n == 1'b0) | (imgColor_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = (((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_6_empty_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_5_empty_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd0) & (imgColor_data_stream_empty_n == 1'b0)));
end

assign col_fu_161_p2 = (col_i_reg_106 + 32'd1);

assign exitcond1_fu_145_p2 = ((lig_i_reg_95 == tmp_6_cast_reg_211) ? 1'b1 : 1'b0);

assign exitcond_fu_156_p2 = ((col_i_reg_106 == tmp_4_cast_reg_206) ? 1'b1 : 1'b0);

assign grp_fu_197_p0 = grp_fu_197_p00;

assign grp_fu_197_p00 = tmp_1_i_reg_237;

assign grp_fu_197_p1 = grp_fu_197_p10;

assign grp_fu_197_p10 = tmp_reg_232;

assign grp_fu_197_p2 = 22'd1366;

assign imgNdg_data_stream_V = {{grp_fu_197_p3[19:12]}};

assign lig_fu_150_p2 = (lig_i_reg_95 + 32'd1);

assign tmp_1_i_fu_175_p2 = (tmp_8_cast_i_fu_171_p1 + tmp_7_cast_i_fu_167_p1);

assign tmp_4_cast_fu_127_p1 = $signed(tmp_4_fu_121_p2);

assign tmp_4_fu_121_p2 = ($signed(tmp_cast_fu_117_p1) + $signed(12'd1));

assign tmp_5_cast_fu_131_p1 = $signed(imgColor_rows_V_dout);

assign tmp_6_cast_fu_141_p1 = $signed(tmp_6_fu_135_p2);

assign tmp_6_fu_135_p2 = ($signed(tmp_5_cast_fu_131_p1) + $signed(13'd1));

assign tmp_7_cast_i_fu_167_p1 = imgColor_data_stream_dout;

assign tmp_8_cast_i_fu_171_p1 = imgColor_data_stream_5_dout;

assign tmp_cast_fu_117_p1 = $signed(imgColor_cols_V_dout);

endmodule //colorToNdg
