// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _main_HH_
#define _main_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Block_proc.h"
#include "AXIvideo2Mat.h"
#include "colorToNdg.h"
#include "fifo_w12_d1_A.h"
#include "fifo_w11_d1_A.h"
#include "fifo_w8_d1_A.h"
#include "main_CONTROL_BUS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32>
struct main : public sc_module {
    // Port declarations 20
    sc_in< sc_logic > s_axi_CONTROL_BUS_AWVALID;
    sc_out< sc_logic > s_axi_CONTROL_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_ADDR_WIDTH> > s_axi_CONTROL_BUS_AWADDR;
    sc_in< sc_logic > s_axi_CONTROL_BUS_WVALID;
    sc_out< sc_logic > s_axi_CONTROL_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_DATA_WIDTH> > s_axi_CONTROL_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_DATA_WIDTH/8> > s_axi_CONTROL_BUS_WSTRB;
    sc_in< sc_logic > s_axi_CONTROL_BUS_ARVALID;
    sc_out< sc_logic > s_axi_CONTROL_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_ADDR_WIDTH> > s_axi_CONTROL_BUS_ARADDR;
    sc_out< sc_logic > s_axi_CONTROL_BUS_RVALID;
    sc_in< sc_logic > s_axi_CONTROL_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_CONTROL_BUS_DATA_WIDTH> > s_axi_CONTROL_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_CONTROL_BUS_RRESP;
    sc_out< sc_logic > s_axi_CONTROL_BUS_BVALID;
    sc_in< sc_logic > s_axi_CONTROL_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_CONTROL_BUS_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const1;
    sc_signal< sc_lv<24> > ap_var_for_const2;
    sc_signal< sc_lv<3> > ap_var_for_const3;
    sc_signal< sc_lv<1> > ap_var_for_const4;


    // Module declarations
    main(sc_module_name name);
    SC_HAS_PROCESS(main);

    ~main();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    main_CONTROL_BUS_s_axi<C_S_AXI_CONTROL_BUS_ADDR_WIDTH,C_S_AXI_CONTROL_BUS_DATA_WIDTH>* main_CONTROL_BUS_s_axi_U;
    Block_proc* Block_proc_U0;
    AXIvideo2Mat* AXIvideo2Mat_U0;
    colorToNdg* colorToNdg_U0;
    fifo_w12_d1_A* imgColor_rows_V_c_U;
    fifo_w11_d1_A* imgColor_cols_V_c_U;
    fifo_w8_d1_A* imgColor_data_stream_U;
    fifo_w8_d1_A* imgColor_data_stream_1_U;
    fifo_w8_d1_A* imgColor_data_stream_2_U;
    fifo_w12_d1_A* imgColor_rows_V_c40_U;
    fifo_w11_d1_A* imgColor_cols_V_c41_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_logic > Block_proc_U0_ap_start;
    sc_signal< sc_logic > Block_proc_U0_ap_done;
    sc_signal< sc_logic > Block_proc_U0_ap_continue;
    sc_signal< sc_logic > Block_proc_U0_ap_idle;
    sc_signal< sc_logic > Block_proc_U0_ap_ready;
    sc_signal< sc_lv<12> > Block_proc_U0_imgColor_rows_V_out_din;
    sc_signal< sc_logic > Block_proc_U0_imgColor_rows_V_out_write;
    sc_signal< sc_lv<11> > Block_proc_U0_imgColor_cols_V_out_din;
    sc_signal< sc_logic > Block_proc_U0_imgColor_cols_V_out_write;
    sc_signal< sc_logic > AXIvideo2Mat_U0_ap_start;
    sc_signal< sc_logic > AXIvideo2Mat_U0_ap_done;
    sc_signal< sc_logic > AXIvideo2Mat_U0_ap_continue;
    sc_signal< sc_logic > AXIvideo2Mat_U0_ap_idle;
    sc_signal< sc_logic > AXIvideo2Mat_U0_ap_ready;
    sc_signal< sc_logic > AXIvideo2Mat_U0_img_rows_V_read;
    sc_signal< sc_logic > AXIvideo2Mat_U0_img_cols_V_read;
    sc_signal< sc_lv<8> > AXIvideo2Mat_U0_img_data_stream_0_V_din;
    sc_signal< sc_logic > AXIvideo2Mat_U0_img_data_stream_0_V_write;
    sc_signal< sc_lv<8> > AXIvideo2Mat_U0_img_data_stream_1_V_din;
    sc_signal< sc_logic > AXIvideo2Mat_U0_img_data_stream_1_V_write;
    sc_signal< sc_lv<8> > AXIvideo2Mat_U0_img_data_stream_2_V_din;
    sc_signal< sc_logic > AXIvideo2Mat_U0_img_data_stream_2_V_write;
    sc_signal< sc_lv<12> > AXIvideo2Mat_U0_img_rows_V_out_din;
    sc_signal< sc_logic > AXIvideo2Mat_U0_img_rows_V_out_write;
    sc_signal< sc_lv<11> > AXIvideo2Mat_U0_img_cols_V_out_din;
    sc_signal< sc_logic > AXIvideo2Mat_U0_img_cols_V_out_write;
    sc_signal< sc_logic > colorToNdg_U0_ap_start;
    sc_signal< sc_logic > colorToNdg_U0_ap_done;
    sc_signal< sc_logic > colorToNdg_U0_ap_continue;
    sc_signal< sc_logic > colorToNdg_U0_ap_idle;
    sc_signal< sc_logic > colorToNdg_U0_ap_ready;
    sc_signal< sc_logic > colorToNdg_U0_imgColor_rows_V_read;
    sc_signal< sc_logic > colorToNdg_U0_imgColor_cols_V_read;
    sc_signal< sc_logic > colorToNdg_U0_imgColor_data_stream_read;
    sc_signal< sc_logic > colorToNdg_U0_imgColor_data_stream_5_read;
    sc_signal< sc_logic > colorToNdg_U0_imgColor_data_stream_6_read;
    sc_signal< sc_lv<8> > colorToNdg_U0_imgNdg_data_stream_V;
    sc_signal< sc_logic > colorToNdg_U0_imgNdg_data_stream_V_ap_vld;
    sc_signal< sc_logic > imgColor_rows_V_c_full_n;
    sc_signal< sc_lv<12> > imgColor_rows_V_c_dout;
    sc_signal< sc_logic > imgColor_rows_V_c_empty_n;
    sc_signal< sc_logic > imgColor_cols_V_c_full_n;
    sc_signal< sc_lv<11> > imgColor_cols_V_c_dout;
    sc_signal< sc_logic > imgColor_cols_V_c_empty_n;
    sc_signal< sc_logic > imgColor_data_stream_full_n;
    sc_signal< sc_lv<8> > imgColor_data_stream_dout;
    sc_signal< sc_logic > imgColor_data_stream_empty_n;
    sc_signal< sc_logic > imgColor_data_stream_1_full_n;
    sc_signal< sc_lv<8> > imgColor_data_stream_1_dout;
    sc_signal< sc_logic > imgColor_data_stream_1_empty_n;
    sc_signal< sc_logic > imgColor_data_stream_2_full_n;
    sc_signal< sc_lv<8> > imgColor_data_stream_2_dout;
    sc_signal< sc_logic > imgColor_data_stream_2_empty_n;
    sc_signal< sc_logic > imgColor_rows_V_c40_full_n;
    sc_signal< sc_lv<12> > imgColor_rows_V_c40_dout;
    sc_signal< sc_logic > imgColor_rows_V_c40_empty_n;
    sc_signal< sc_logic > imgColor_cols_V_c41_full_n;
    sc_signal< sc_lv<11> > imgColor_cols_V_c41_dout;
    sc_signal< sc_logic > imgColor_cols_V_c41_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > Block_proc_U0_start_full_n;
    sc_signal< sc_logic > Block_proc_U0_start_write;
    sc_signal< sc_logic > AXIvideo2Mat_U0_start_full_n;
    sc_signal< sc_logic > AXIvideo2Mat_U0_start_write;
    sc_signal< sc_logic > colorToNdg_U0_start_full_n;
    sc_signal< sc_logic > colorToNdg_U0_start_write;
    sc_signal< sc_lv<32> > ap_return;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_S_AXI_WSTRB_WIDTH;
    static const int C_S_AXI_ADDR_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<24> ap_const_lv24_0;
    static const sc_lv<24> ap_const_lv24_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_clk_no_reset_();
    void thread_AXIvideo2Mat_U0_ap_continue();
    void thread_AXIvideo2Mat_U0_ap_start();
    void thread_AXIvideo2Mat_U0_start_full_n();
    void thread_AXIvideo2Mat_U0_start_write();
    void thread_Block_proc_U0_ap_continue();
    void thread_Block_proc_U0_ap_start();
    void thread_Block_proc_U0_start_full_n();
    void thread_Block_proc_U0_start_write();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_colorToNdg_U0_ap_continue();
    void thread_colorToNdg_U0_start_full_n();
    void thread_colorToNdg_U0_start_write();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
