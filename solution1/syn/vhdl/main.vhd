-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC );
end;


architecture behav of main is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "main,hls_ip_2017_4_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.268000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=539,HLS_SYN_LUT=1003}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal Block_proc_U0_ap_start : STD_LOGIC;
    signal Block_proc_U0_ap_done : STD_LOGIC;
    signal Block_proc_U0_ap_continue : STD_LOGIC;
    signal Block_proc_U0_ap_idle : STD_LOGIC;
    signal Block_proc_U0_ap_ready : STD_LOGIC;
    signal Block_proc_U0_imgColor_rows_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal Block_proc_U0_imgColor_rows_V_out_write : STD_LOGIC;
    signal Block_proc_U0_imgColor_cols_V_out_din : STD_LOGIC_VECTOR (10 downto 0);
    signal Block_proc_U0_imgColor_cols_V_out_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_rows_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_cols_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_rows_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal AXIvideo2Mat_U0_img_rows_V_out_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_cols_V_out_din : STD_LOGIC_VECTOR (10 downto 0);
    signal AXIvideo2Mat_U0_img_cols_V_out_write : STD_LOGIC;
    signal colorToNdg_U0_ap_start : STD_LOGIC := '0';
    signal colorToNdg_U0_ap_done : STD_LOGIC;
    signal colorToNdg_U0_ap_continue : STD_LOGIC;
    signal colorToNdg_U0_ap_idle : STD_LOGIC;
    signal colorToNdg_U0_ap_ready : STD_LOGIC;
    signal colorToNdg_U0_imgColor_rows_V_read : STD_LOGIC;
    signal colorToNdg_U0_imgColor_cols_V_read : STD_LOGIC;
    signal colorToNdg_U0_imgColor_data_stream_read : STD_LOGIC;
    signal colorToNdg_U0_imgColor_data_stream_5_read : STD_LOGIC;
    signal colorToNdg_U0_imgColor_data_stream_6_read : STD_LOGIC;
    signal colorToNdg_U0_imgNdg_data_stream_V : STD_LOGIC_VECTOR (7 downto 0);
    signal colorToNdg_U0_imgNdg_data_stream_V_ap_vld : STD_LOGIC;
    signal imgColor_rows_V_c_full_n : STD_LOGIC;
    signal imgColor_rows_V_c_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal imgColor_rows_V_c_empty_n : STD_LOGIC;
    signal imgColor_cols_V_c_full_n : STD_LOGIC;
    signal imgColor_cols_V_c_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal imgColor_cols_V_c_empty_n : STD_LOGIC;
    signal imgColor_data_stream_full_n : STD_LOGIC;
    signal imgColor_data_stream_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal imgColor_data_stream_empty_n : STD_LOGIC;
    signal imgColor_data_stream_1_full_n : STD_LOGIC;
    signal imgColor_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal imgColor_data_stream_1_empty_n : STD_LOGIC;
    signal imgColor_data_stream_2_full_n : STD_LOGIC;
    signal imgColor_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal imgColor_data_stream_2_empty_n : STD_LOGIC;
    signal imgColor_rows_V_c40_full_n : STD_LOGIC;
    signal imgColor_rows_V_c40_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal imgColor_rows_V_c40_empty_n : STD_LOGIC;
    signal imgColor_cols_V_c41_full_n : STD_LOGIC;
    signal imgColor_cols_V_c41_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal imgColor_cols_V_c41_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal Block_proc_U0_start_full_n : STD_LOGIC;
    signal Block_proc_U0_start_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_full_n : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_write : STD_LOGIC;
    signal colorToNdg_U0_start_full_n : STD_LOGIC;
    signal colorToNdg_U0_start_write : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);

    component Block_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        imgColor_rows_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        imgColor_rows_V_out_full_n : IN STD_LOGIC;
        imgColor_rows_V_out_write : OUT STD_LOGIC;
        imgColor_cols_V_out_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        imgColor_cols_V_out_full_n : IN STD_LOGIC;
        imgColor_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        AXI_video_strm_V_data_V : IN STD_LOGIC_VECTOR (23 downto 0);
        AXI_video_strm_V_keep_V : IN STD_LOGIC_VECTOR (2 downto 0);
        AXI_video_strm_V_strb_V : IN STD_LOGIC_VECTOR (2 downto 0);
        AXI_video_strm_V_user_V : IN STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_last_V : IN STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_id_V : IN STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_dest_V : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC;
        img_rows_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_rows_V_out_full_n : IN STD_LOGIC;
        img_rows_V_out_write : OUT STD_LOGIC;
        img_cols_V_out_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        img_cols_V_out_full_n : IN STD_LOGIC;
        img_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component colorToNdg IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        imgColor_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        imgColor_rows_V_empty_n : IN STD_LOGIC;
        imgColor_rows_V_read : OUT STD_LOGIC;
        imgColor_cols_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        imgColor_cols_V_empty_n : IN STD_LOGIC;
        imgColor_cols_V_read : OUT STD_LOGIC;
        imgColor_data_stream_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        imgColor_data_stream_empty_n : IN STD_LOGIC;
        imgColor_data_stream_read : OUT STD_LOGIC;
        imgColor_data_stream_5_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        imgColor_data_stream_5_empty_n : IN STD_LOGIC;
        imgColor_data_stream_5_read : OUT STD_LOGIC;
        imgColor_data_stream_6_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        imgColor_data_stream_6_empty_n : IN STD_LOGIC;
        imgColor_data_stream_6_read : OUT STD_LOGIC;
        imgNdg_data_stream_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        imgNdg_data_stream_V_ap_vld : OUT STD_LOGIC );
    end component;


    component fifo_w12_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w11_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (10 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component main_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    main_CONTROL_BUS_s_axi_U : component main_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_const_lv32_0);

    Block_proc_U0 : component Block_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_proc_U0_ap_start,
        ap_done => Block_proc_U0_ap_done,
        ap_continue => Block_proc_U0_ap_continue,
        ap_idle => Block_proc_U0_ap_idle,
        ap_ready => Block_proc_U0_ap_ready,
        imgColor_rows_V_out_din => Block_proc_U0_imgColor_rows_V_out_din,
        imgColor_rows_V_out_full_n => imgColor_rows_V_c_full_n,
        imgColor_rows_V_out_write => Block_proc_U0_imgColor_rows_V_out_write,
        imgColor_cols_V_out_din => Block_proc_U0_imgColor_cols_V_out_din,
        imgColor_cols_V_out_full_n => imgColor_cols_V_c_full_n,
        imgColor_cols_V_out_write => Block_proc_U0_imgColor_cols_V_out_write);

    AXIvideo2Mat_U0 : component AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2Mat_U0_ap_start,
        ap_done => AXIvideo2Mat_U0_ap_done,
        ap_continue => AXIvideo2Mat_U0_ap_continue,
        ap_idle => AXIvideo2Mat_U0_ap_idle,
        ap_ready => AXIvideo2Mat_U0_ap_ready,
        AXI_video_strm_V_data_V => ap_const_lv24_0,
        AXI_video_strm_V_keep_V => ap_const_lv3_0,
        AXI_video_strm_V_strb_V => ap_const_lv3_0,
        AXI_video_strm_V_user_V => ap_const_lv1_0,
        AXI_video_strm_V_last_V => ap_const_lv1_0,
        AXI_video_strm_V_id_V => ap_const_lv1_0,
        AXI_video_strm_V_dest_V => ap_const_lv1_0,
        img_rows_V_dout => imgColor_rows_V_c_dout,
        img_rows_V_empty_n => imgColor_rows_V_c_empty_n,
        img_rows_V_read => AXIvideo2Mat_U0_img_rows_V_read,
        img_cols_V_dout => imgColor_cols_V_c_dout,
        img_cols_V_empty_n => imgColor_cols_V_c_empty_n,
        img_cols_V_read => AXIvideo2Mat_U0_img_cols_V_read,
        img_data_stream_0_V_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => imgColor_data_stream_full_n,
        img_data_stream_0_V_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => imgColor_data_stream_1_full_n,
        img_data_stream_1_V_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => imgColor_data_stream_2_full_n,
        img_data_stream_2_V_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        img_rows_V_out_din => AXIvideo2Mat_U0_img_rows_V_out_din,
        img_rows_V_out_full_n => imgColor_rows_V_c40_full_n,
        img_rows_V_out_write => AXIvideo2Mat_U0_img_rows_V_out_write,
        img_cols_V_out_din => AXIvideo2Mat_U0_img_cols_V_out_din,
        img_cols_V_out_full_n => imgColor_cols_V_c41_full_n,
        img_cols_V_out_write => AXIvideo2Mat_U0_img_cols_V_out_write);

    colorToNdg_U0 : component colorToNdg
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => colorToNdg_U0_ap_start,
        ap_done => colorToNdg_U0_ap_done,
        ap_continue => colorToNdg_U0_ap_continue,
        ap_idle => colorToNdg_U0_ap_idle,
        ap_ready => colorToNdg_U0_ap_ready,
        imgColor_rows_V_dout => imgColor_rows_V_c40_dout,
        imgColor_rows_V_empty_n => imgColor_rows_V_c40_empty_n,
        imgColor_rows_V_read => colorToNdg_U0_imgColor_rows_V_read,
        imgColor_cols_V_dout => imgColor_cols_V_c41_dout,
        imgColor_cols_V_empty_n => imgColor_cols_V_c41_empty_n,
        imgColor_cols_V_read => colorToNdg_U0_imgColor_cols_V_read,
        imgColor_data_stream_dout => imgColor_data_stream_dout,
        imgColor_data_stream_empty_n => imgColor_data_stream_empty_n,
        imgColor_data_stream_read => colorToNdg_U0_imgColor_data_stream_read,
        imgColor_data_stream_5_dout => imgColor_data_stream_1_dout,
        imgColor_data_stream_5_empty_n => imgColor_data_stream_1_empty_n,
        imgColor_data_stream_5_read => colorToNdg_U0_imgColor_data_stream_5_read,
        imgColor_data_stream_6_dout => imgColor_data_stream_2_dout,
        imgColor_data_stream_6_empty_n => imgColor_data_stream_2_empty_n,
        imgColor_data_stream_6_read => colorToNdg_U0_imgColor_data_stream_6_read,
        imgNdg_data_stream_V => colorToNdg_U0_imgNdg_data_stream_V,
        imgNdg_data_stream_V_ap_vld => colorToNdg_U0_imgNdg_data_stream_V_ap_vld);

    imgColor_rows_V_c_U : component fifo_w12_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc_U0_imgColor_rows_V_out_din,
        if_full_n => imgColor_rows_V_c_full_n,
        if_write => Block_proc_U0_imgColor_rows_V_out_write,
        if_dout => imgColor_rows_V_c_dout,
        if_empty_n => imgColor_rows_V_c_empty_n,
        if_read => AXIvideo2Mat_U0_img_rows_V_read);

    imgColor_cols_V_c_U : component fifo_w11_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc_U0_imgColor_cols_V_out_din,
        if_full_n => imgColor_cols_V_c_full_n,
        if_write => Block_proc_U0_imgColor_cols_V_out_write,
        if_dout => imgColor_cols_V_c_dout,
        if_empty_n => imgColor_cols_V_c_empty_n,
        if_read => AXIvideo2Mat_U0_img_cols_V_read);

    imgColor_data_stream_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        if_full_n => imgColor_data_stream_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        if_dout => imgColor_data_stream_dout,
        if_empty_n => imgColor_data_stream_empty_n,
        if_read => colorToNdg_U0_imgColor_data_stream_read);

    imgColor_data_stream_1_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        if_full_n => imgColor_data_stream_1_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        if_dout => imgColor_data_stream_1_dout,
        if_empty_n => imgColor_data_stream_1_empty_n,
        if_read => colorToNdg_U0_imgColor_data_stream_5_read);

    imgColor_data_stream_2_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        if_full_n => imgColor_data_stream_2_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        if_dout => imgColor_data_stream_2_dout,
        if_empty_n => imgColor_data_stream_2_empty_n,
        if_read => colorToNdg_U0_imgColor_data_stream_6_read);

    imgColor_rows_V_c40_U : component fifo_w12_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_rows_V_out_din,
        if_full_n => imgColor_rows_V_c40_full_n,
        if_write => AXIvideo2Mat_U0_img_rows_V_out_write,
        if_dout => imgColor_rows_V_c40_dout,
        if_empty_n => imgColor_rows_V_c40_empty_n,
        if_read => colorToNdg_U0_imgColor_rows_V_read);

    imgColor_cols_V_c41_U : component fifo_w11_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_cols_V_out_din,
        if_full_n => imgColor_cols_V_c41_full_n,
        if_write => AXIvideo2Mat_U0_img_cols_V_out_write,
        if_dout => imgColor_cols_V_c41_dout,
        if_empty_n => imgColor_cols_V_c41_empty_n,
        if_read => colorToNdg_U0_imgColor_cols_V_read);





    colorToNdg_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                colorToNdg_U0_ap_start <= ap_const_logic_0;
            else
                colorToNdg_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;

    AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat_U0_ap_start <= ap_const_logic_1;
    AXIvideo2Mat_U0_start_full_n <= ap_const_logic_1;
    AXIvideo2Mat_U0_start_write <= ap_const_logic_0;
    Block_proc_U0_ap_continue <= ap_const_logic_1;
    Block_proc_U0_ap_start <= ap_start;
    Block_proc_U0_start_full_n <= ap_const_logic_1;
    Block_proc_U0_start_write <= ap_const_logic_0;
    ap_done <= ap_const_logic_1;
    ap_idle <= (colorToNdg_U0_ap_idle and Block_proc_U0_ap_idle and AXIvideo2Mat_U0_ap_idle);
    ap_ready <= ap_const_logic_1;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_sync_done;
    ap_sync_done <= ap_const_logic_1;
    ap_sync_ready <= ap_sync_done;
    colorToNdg_U0_ap_continue <= ap_const_logic_1;
    colorToNdg_U0_start_full_n <= ap_const_logic_1;
    colorToNdg_U0_start_write <= ap_const_logic_0;
end behav;
