-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity colorToNdg is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imgColor_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    imgColor_rows_V_empty_n : IN STD_LOGIC;
    imgColor_rows_V_read : OUT STD_LOGIC;
    imgColor_cols_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
    imgColor_cols_V_empty_n : IN STD_LOGIC;
    imgColor_cols_V_read : OUT STD_LOGIC;
    imgColor_data_stream_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    imgColor_data_stream_empty_n : IN STD_LOGIC;
    imgColor_data_stream_read : OUT STD_LOGIC;
    imgColor_data_stream_5_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    imgColor_data_stream_5_empty_n : IN STD_LOGIC;
    imgColor_data_stream_5_read : OUT STD_LOGIC;
    imgColor_data_stream_6_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    imgColor_data_stream_6_empty_n : IN STD_LOGIC;
    imgColor_data_stream_6_read : OUT STD_LOGIC;
    imgNdg_data_stream_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    imgNdg_data_stream_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of colorToNdg is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv22_556 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010101010110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal imgColor_rows_V_blk_n : STD_LOGIC;
    signal imgColor_cols_V_blk_n : STD_LOGIC;
    signal imgColor_data_stream_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal imgColor_data_stream_5_blk_n : STD_LOGIC;
    signal imgColor_data_stream_6_blk_n : STD_LOGIC;
    signal tmp_4_cast_fu_127_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_cast_reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_6_cast_fu_141_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_cast_reg_211 : STD_LOGIC_VECTOR (31 downto 0);
    signal lig_fu_150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lig_reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal col_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal tmp_reg_232 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_i_fu_175_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_i_reg_237 : STD_LOGIC_VECTOR (8 downto 0);
    signal lig_i_reg_95 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_i_reg_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond1_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_fu_117_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_fu_121_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_cast_fu_131_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_fu_135_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_8_cast_i_fu_171_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_cast_i_fu_167_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_197_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_197_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_197_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_197_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_197_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_197_p10 : STD_LOGIC_VECTOR (9 downto 0);

    component main_am_addmul_9nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    main_am_addmul_9nbkb_U17 : component main_am_addmul_9nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_197_p0,
        din1 => grp_fu_197_p1,
        din2 => grp_fu_197_p2,
        dout => grp_fu_197_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_145_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    col_i_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_145_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                col_i_reg_106 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                col_i_reg_106 <= col_reg_227;
            end if; 
        end if;
    end process;

    lig_i_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_6_empty_n = ap_const_logic_0)) or ((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_5_empty_n = ap_const_logic_0)) or ((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_empty_n = ap_const_logic_0)))) and (exitcond_fu_156_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                lig_i_reg_95 <= lig_reg_219;
            elsif ((not(((ap_start = ap_const_logic_0) or (imgColor_cols_V_empty_n = ap_const_logic_0) or (imgColor_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                lig_i_reg_95 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_6_empty_n = ap_const_logic_0)) or ((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_5_empty_n = ap_const_logic_0)) or ((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                col_reg_227 <= col_fu_161_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                lig_reg_219 <= lig_fu_150_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_6_empty_n = ap_const_logic_0)) or ((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_5_empty_n = ap_const_logic_0)) or ((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_empty_n = ap_const_logic_0)))) and (exitcond_fu_156_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_1_i_reg_237 <= tmp_1_i_fu_175_p2;
                tmp_reg_232 <= imgColor_data_stream_6_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (imgColor_cols_V_empty_n = ap_const_logic_0) or (imgColor_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_4_cast_reg_206 <= tmp_4_cast_fu_127_p1;
                tmp_6_cast_reg_211 <= tmp_6_cast_fu_141_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, imgColor_rows_V_empty_n, imgColor_cols_V_empty_n, imgColor_data_stream_empty_n, imgColor_data_stream_5_empty_n, imgColor_data_stream_6_empty_n, ap_CS_fsm_state3, exitcond_fu_156_p2, ap_CS_fsm_state2, exitcond1_fu_145_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (imgColor_cols_V_empty_n = ap_const_logic_0) or (imgColor_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_145_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not((((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_6_empty_n = ap_const_logic_0)) or ((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_5_empty_n = ap_const_logic_0)) or ((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_empty_n = ap_const_logic_0)))) and (exitcond_fu_156_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_6_empty_n = ap_const_logic_0)) or ((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_5_empty_n = ap_const_logic_0)) or ((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_empty_n = ap_const_logic_0)))) and (exitcond_fu_156_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, imgColor_rows_V_empty_n, imgColor_cols_V_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (imgColor_cols_V_empty_n = ap_const_logic_0) or (imgColor_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_assign_proc : process(imgColor_data_stream_empty_n, imgColor_data_stream_5_empty_n, imgColor_data_stream_6_empty_n, exitcond_fu_156_p2)
    begin
                ap_block_state3 <= (((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_6_empty_n = ap_const_logic_0)) or ((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_5_empty_n = ap_const_logic_0)) or ((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_empty_n = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, exitcond1_fu_145_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_145_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_145_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_145_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_fu_161_p2 <= std_logic_vector(unsigned(col_i_reg_106) + unsigned(ap_const_lv32_1));
    exitcond1_fu_145_p2 <= "1" when (lig_i_reg_95 = tmp_6_cast_reg_211) else "0";
    exitcond_fu_156_p2 <= "1" when (col_i_reg_106 = tmp_4_cast_reg_206) else "0";
    grp_fu_197_p0 <= grp_fu_197_p00(9 - 1 downto 0);
    grp_fu_197_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_i_reg_237),10));
    grp_fu_197_p1 <= grp_fu_197_p10(8 - 1 downto 0);
    grp_fu_197_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_232),10));
    grp_fu_197_p2 <= ap_const_lv22_556(12 - 1 downto 0);

    imgColor_cols_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, imgColor_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imgColor_cols_V_blk_n <= imgColor_cols_V_empty_n;
        else 
            imgColor_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imgColor_cols_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, imgColor_rows_V_empty_n, imgColor_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (imgColor_cols_V_empty_n = ap_const_logic_0) or (imgColor_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imgColor_cols_V_read <= ap_const_logic_1;
        else 
            imgColor_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    imgColor_data_stream_5_blk_n_assign_proc : process(imgColor_data_stream_5_empty_n, ap_CS_fsm_state3, exitcond_fu_156_p2)
    begin
        if (((exitcond_fu_156_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            imgColor_data_stream_5_blk_n <= imgColor_data_stream_5_empty_n;
        else 
            imgColor_data_stream_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imgColor_data_stream_5_read_assign_proc : process(imgColor_data_stream_empty_n, imgColor_data_stream_5_empty_n, imgColor_data_stream_6_empty_n, ap_CS_fsm_state3, exitcond_fu_156_p2)
    begin
        if ((not((((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_6_empty_n = ap_const_logic_0)) or ((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_5_empty_n = ap_const_logic_0)) or ((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_empty_n = ap_const_logic_0)))) and (exitcond_fu_156_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            imgColor_data_stream_5_read <= ap_const_logic_1;
        else 
            imgColor_data_stream_5_read <= ap_const_logic_0;
        end if; 
    end process;


    imgColor_data_stream_6_blk_n_assign_proc : process(imgColor_data_stream_6_empty_n, ap_CS_fsm_state3, exitcond_fu_156_p2)
    begin
        if (((exitcond_fu_156_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            imgColor_data_stream_6_blk_n <= imgColor_data_stream_6_empty_n;
        else 
            imgColor_data_stream_6_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imgColor_data_stream_6_read_assign_proc : process(imgColor_data_stream_empty_n, imgColor_data_stream_5_empty_n, imgColor_data_stream_6_empty_n, ap_CS_fsm_state3, exitcond_fu_156_p2)
    begin
        if ((not((((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_6_empty_n = ap_const_logic_0)) or ((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_5_empty_n = ap_const_logic_0)) or ((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_empty_n = ap_const_logic_0)))) and (exitcond_fu_156_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            imgColor_data_stream_6_read <= ap_const_logic_1;
        else 
            imgColor_data_stream_6_read <= ap_const_logic_0;
        end if; 
    end process;


    imgColor_data_stream_blk_n_assign_proc : process(imgColor_data_stream_empty_n, ap_CS_fsm_state3, exitcond_fu_156_p2)
    begin
        if (((exitcond_fu_156_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            imgColor_data_stream_blk_n <= imgColor_data_stream_empty_n;
        else 
            imgColor_data_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imgColor_data_stream_read_assign_proc : process(imgColor_data_stream_empty_n, imgColor_data_stream_5_empty_n, imgColor_data_stream_6_empty_n, ap_CS_fsm_state3, exitcond_fu_156_p2)
    begin
        if ((not((((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_6_empty_n = ap_const_logic_0)) or ((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_5_empty_n = ap_const_logic_0)) or ((exitcond_fu_156_p2 = ap_const_lv1_0) and (imgColor_data_stream_empty_n = ap_const_logic_0)))) and (exitcond_fu_156_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            imgColor_data_stream_read <= ap_const_logic_1;
        else 
            imgColor_data_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    imgColor_rows_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, imgColor_rows_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imgColor_rows_V_blk_n <= imgColor_rows_V_empty_n;
        else 
            imgColor_rows_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imgColor_rows_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, imgColor_rows_V_empty_n, imgColor_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (imgColor_cols_V_empty_n = ap_const_logic_0) or (imgColor_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imgColor_rows_V_read <= ap_const_logic_1;
        else 
            imgColor_rows_V_read <= ap_const_logic_0;
        end if; 
    end process;

    imgNdg_data_stream_V <= grp_fu_197_p3(19 downto 12);

    imgNdg_data_stream_V_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            imgNdg_data_stream_V_ap_vld <= ap_const_logic_1;
        else 
            imgNdg_data_stream_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    lig_fu_150_p2 <= std_logic_vector(unsigned(lig_i_reg_95) + unsigned(ap_const_lv32_1));
    tmp_1_i_fu_175_p2 <= std_logic_vector(unsigned(tmp_8_cast_i_fu_171_p1) + unsigned(tmp_7_cast_i_fu_167_p1));
        tmp_4_cast_fu_127_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_121_p2),32));

    tmp_4_fu_121_p2 <= std_logic_vector(signed(tmp_cast_fu_117_p1) + signed(ap_const_lv12_1));
        tmp_5_cast_fu_131_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(imgColor_rows_V_dout),13));

        tmp_6_cast_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_135_p2),32));

    tmp_6_fu_135_p2 <= std_logic_vector(signed(tmp_5_cast_fu_131_p1) + signed(ap_const_lv13_1));
    tmp_7_cast_i_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(imgColor_data_stream_dout),9));
    tmp_8_cast_i_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(imgColor_data_stream_5_dout),9));
        tmp_cast_fu_117_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(imgColor_cols_V_dout),12));

end behav;
